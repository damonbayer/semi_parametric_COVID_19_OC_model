
q = vi(my_sim_model, ADVI(100, 10000))  # perform VI on `m` using the VI method `vi_alg`, which returns a `VariationalPosterior`

show(q)
typeof(q)

MultivariateTransformed{DistributionsAD.TuringDiagMvNormal{Vector{Float64}, Vector{Float64}}, Stacked{Tuple{Identity{1}, Identity{1}, Identity{1}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}}, NTuple{10, UnitRange{Int64}}}}(
dist: DistributionsAD.TuringDiagMvNormal{Vector{Float64}, Vector{Float64}}(
m: [-2.7241486030155735, -0.1532748692157675, -0.3701977945800141, -0.012662971841065521, 0.23448784193851852, 0.3291133956431708, 0.44732079233767075, 0.5254955281950097, 0.5832300873057783, 0.5845391389886676, 0.49784422496400166, 0.4009191882435398, 0.36904332810165563, 0.2257488659714557, 0.11257660942907628, 0.08228165736030861, -0.04615938621011893, -0.11699687918522468, -0.19534737389263399, -0.24218998097770772, -0.06004172591762827, -0.021084473249351077, 0.019677857427152754, 0.0391591147043871, 0.007762756188457127, -0.5373728110750388, -0.294683949954334, -0.20741223579834447, -0.7990078285565142, -0.7630778871010694, -1.1633963934343678, -0.9225307998318938, -0.674935783862419, -0.43252145766635397, -0.13293755803936363, 0.027031894841414876, -0.1850088515605813, 0.08961983306941106, 0.3289475887748474, 0.12858381433003138, 0.0860094615993919, 0.40254496017091895, 0.09070381873141707, -0.036927875657496355, -0.12339679840977631, -0.5678487045406845, 0.020300623088508395, -0.0049842553792378026, 0.023136674288039717, 0.03138935664484378, -1.647183726725431, 0.28908146941959406, -1.1036961692665295, -0.512106032988866, 1.23464851137711, 0.7973698078615042, 0.7231753738909455, 0.5449551146057007, 0.36690086024826174, 1.0207404369747306, 1.1072332591630438, 0.07620577746501922, 0.500341080016489, 0.7505905611829375, -0.17856342025285643, 0.5768484028693304, 0.3104642504960931, 0.4666819384847406, 1.0944187067915183, -0.9130138986994014, -0.32530752786350886, -0.013095852336125879, -0.02609554972258727, 0.0012659172664390337, -0.009896067313649446, -1.4059675235684346, -0.027682933954112296, 1.003788534984706, 1.7686705888998742, -3.509657994708179, -0.15935371294174422, -0.00011848181186226202]
Ïƒ: [0.2476051208795929, 0.006542934762626734, 0.12348187667059388, 0.13285357433960535, 0.13750942283667983, 0.13848695960598892, 0.16083253766658592, 0.17114890420040343, 0.17959914021220688, 0.2021694254737439, 0.2340147307052784, 0.27382980929558454, 0.30093207252670384, 0.31236367986011565, 0.39992704820880765, 0.47547112487291626, 0.5790211595929184, 0.6818910736181014, 0.8195207229515944, 0.9107253206960628, 0.9806296879984685, 0.9904640122372149, 1.0026148664195087, 1.0011374805155568, 1.010884496172076, 0.7793505330052247, 0.12455219847506215, 0.5650670340204107, 0.5935738445606876, 0.5777143686953731, 0.6007761770207383, 0.6391085037242261, 0.6299489817929842, 0.665204296703732, 0.6912536536979095, 0.6777273364393646, 0.699013402871491, 0.7235847149572263, 0.7083615249902525, 0.7767727830135226, 0.8055178583563434, 0.8206408483417682, 0.8352209040944633, 0.8828304287691838, 0.9075076059829666, 0.9448281557970927, 1.0025410331777473, 0.9954598459958228, 1.0111604253099837, 0.9910047753183979, 0.13844847200565105, 0.03749964251549371, 0.1642443857021361, 0.15700548734928046, 0.16250520629511703, 0.17666010750802416, 0.17034528235440488, 0.1681484661714171, 0.16906476347123472, 0.18135891782254063, 0.18350639975399183, 0.19549130610724474, 0.19533842877700455, 0.20368197825904322, 0.22166769551462961, 0.2224410765225511, 0.2509264951719261, 0.2707167436034181, 0.3093059802001626, 0.38903553876122404, 0.5074107266439201, 1.0129659480957105, 0.9901340396099738, 0.9923999367242553, 1.0060619680267011, 0.05465836408810321, 0.9855430154696623, 0.3926874301774129, 0.2941587622311748, 0.6635537289803396, 1.0129409968142327, 0.9447293076126115]
)

transform: Stacked{Tuple{Identity{1}, Identity{1}, Identity{1}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}, Identity{0}}, NTuple{10, UnitRange{Int64}}}((Identity{1}(), Identity{1}(), Identity{1}(), Identity{0}(), Identity{0}(), Identity{0}(), Identity{0}(), Identity{0}(), Identity{0}(), Identity{0}()), (1:25, 26:50, 51:75, 76:76, 77:77, 78:78, 79:79, 80:80, 81:81, 82:82))
)

Random.seed!(10)
q_samples = rand(q, 8000)
write("q_samples.jls", q_samples)


findmax(logpdf(q, q_samples))
findmin(logpdf(q, q_samples))

#264 is googd
# 160 is terrible

q_samples[:, 264]

q_samples_chains = Chains(transpose(q_samples), names(map_estimate_sa_1.values,1)[1:82])


q_max_chains = map_chains = Chains(transpose(reshape(repeat(q_samples[:, 264], 2000), :, 2000)),
names(map_estimate_sa_1.values,1)[1:82])
q_min_chains = map_chains = Chains(transpose(reshape(repeat(q_samples[:, 160], 2000), :, 2000)),
names(map_estimate_sa_1.values,1)[1:82])

Random.seed!(1)
q_max_predictive = predict(bayes_seird(
  Vector{Union{Missing, Int64}}(undef, length(data_new_deaths)),
  Vector{Union{Missing, Int64}}(undef, length(data_new_cases)),
  Vector{Union{Missing, Int64}}(undef, length(data_seroprev_cases))),
  q_max_chains)

CSV.write("q_max_predictive.csv", DataFrame(q_max_predictive))

Random.seed!(1)
q_min_predictive = predict(bayes_seird(
  Vector{Union{Missing, Int64}}(undef, length(data_new_deaths)),
  Vector{Union{Missing, Int64}}(undef, length(data_new_cases)),
  Vector{Union{Missing, Int64}}(undef, length(data_seroprev_cases))),
  q_min_chains)

CSV.write("q_min_predictive.csv", DataFrame(q_min_predictive))

q_predictive = predict(bayes_seird(
    Vector{Union{Missing, Int64}}(undef, length(data_new_deaths)),
    Vector{Union{Missing, Int64}}(undef, length(data_new_cases)),
    Vector{Union{Missing, Int64}}(undef, length(data_seroprev_cases))),
    q_samples_chains)

CSV.write("q_predictive.csv", DataFrame(q_predictive))